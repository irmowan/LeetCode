# Time: O(n)
# Space: O(1)

# Given an array of numbers nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once.
#
# For example:
#
# Given nums = [1, 2, 1, 3, 2, 5], return [3, 5].
#
# Note:
# The order of the result is not important. So in the above example, [5, 3] is also correct.
# Your algorithm should run in linear runtime complexity. Could you
# implement it using only constant space complexity?

import operator

class Solution(object):

    def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        xor = reduce(operator.xor, nums)
        [a, b] = [0, 0]
        # lowbit means the lowest non-zero bit in varible xor,
        # which is different to xor a/b, as lowbit is generated by a ^ b.
        lowbit = xor & -xor
        for num in nums:
            if num & lowbit:
                a ^= num
            else:
                b ^= num
        return [a, b]

if __name__ == '__main__':
    nums = [1, 3, 6, 3, 1, 8, 4, 5, 7, 4, 7, 8]
    print Solution().singleNumber(nums)
